import pandas as pd
import pytest


@pytest.fixture
def date_filter_main():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 00:26:13",
                "21.12.2021 16:50:25",
                "13.12.2021 17:26:13",
                "15.08.2021 09:50:25",
                "14.03.2021 09:50:25",
                "13.11.2020 09:50:25",
            ],
            "Сумма платежа": [-131.20, -2.07, -160.40, -17.93, -103.76, -5.38],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def date_filter_week():
    df = pd.DataFrame(
        {
            "Дата операции": ["26.12.2021 00:26:13", "21.12.2021 16:50:25"],
            "Сумма платежа": [-131.20, -2.07],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def date_filter_month():
    df = pd.DataFrame(
        {
            "Дата операции": ["26.12.2021 00:26:13", "21.12.2021 16:50:25", "13.12.2021 17:26:13"],
            "Сумма платежа": [-131.20, -2.07, -160.40],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def date_filter_year():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 00:26:13",
                "21.12.2021 16:50:25",
                "13.12.2021 17:26:13",
                "15.08.2021 09:50:25",
                "14.03.2021 09:50:25",
            ],
            "Сумма платежа": [-131.20, -2.07, -160.40, -17.93, -103.76],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def cards_original():
    return pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
                "13.12.2021 09:50:25",
                "15.12.2021 09:50:25",
                "14.12.2021 09:50:25",
                "03.12.2021 09:50:25",
            ],
            "Номер карты": ["*5091", "*7197", "*5091", "*7197", "*5091", "*7197"],
            "Статус": ["OK", "FAILED", "OK", "OK", "OK", "OK"],
            "Сумма платежа": [-131.20, -2.07, 160.40, -17.93, -127.55, -315.02],
            "Валюта платежа": ["USD", "RUB", "RUB", "RUB", "RUB", "RUB"],
        }
    )


@pytest.fixture
def cards_result():
    return [
        {"last_digits": "5091", "total_spent": 127.55, "cashback": 1.28},
        {"last_digits": "7197", "total_spent": 332.95, "cashback": 3.33},
    ]


@pytest.fixture
def cards_no_filter():
    return pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
                "13.12.2021 09:50:25",
            ],
            "Номер карты": ["*5091", "*7197", "*5091"],
            "Статус": ["OK", "FAILED", "OK"],
            "Сумма платежа": [-131.20, -2.07, 160.40],
            "Валюта платежа": ["USD", "RUB", "RUB"],
        }
    )


@pytest.fixture
def top_transactions_original():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
                "13.12.2021 09:50:25",
                "15.12.2021 09:50:25",
                "14.12.2021 09:50:25",
                "03.12.2021 09:50:25",
                "14.08.2021 09:50:25",
                "03.11.2021 09:50:25",
            ],
            "Статус": ["OK", "FAILED", "OK", "OK", "OK", "OK", "OK", "OK"],
            "Сумма платежа": [-131.20, -2.07, 160.40, -17.93, -127.55, -315.02, 35.60, -76.12],
            "Валюта платежа": ["USD", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB"],
            "Категория": ["Связь", "Цветы", "Связь", "Связь", "Каршеринг", "Аптеки", "Дом и ремонт", "Фастфуд"],
            "Описание": ["Devajs", "IP Isaeva", "МТС", "Devajs", "Ситидрайв", "Apteka 23", "МаксидоМ", "Mouse Tail"],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def top_transactions_result():
    return [
        {"date": "03.12.2021", "amount": -315.02, "category": "Аптеки", "description": "Apteka 23"},
        {"date": "13.12.2021", "amount": 160.4, "category": "Связь", "description": "МТС"},
        {"date": "14.12.2021", "amount": -127.55, "category": "Каршеринг", "description": "Ситидрайв"},
        {"date": "03.11.2021", "amount": -76.12, "category": "Фастфуд", "description": "Mouse Tail"},
        {"date": "14.08.2021", "amount": 35.6, "category": "Дом и ремонт", "description": "МаксидоМ"},
    ]


@pytest.fixture
def top_transactions_no_filter():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
            ],
            "Статус": ["OK", "FAILED"],
            "Сумма платежа": [-131.20, -2.07],
            "Валюта платежа": ["USD", "RUB"],
            "Категория": ["Связь", "Цветы"],
            "Описание": ["Devajs", "IP Isaeva"],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def expenses_original():
    return pd.DataFrame(
        {
            "Статус": [
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
                "OK",
            ],
            "Сумма платежа": [
                -118.12,
                -78.05,
                -564.0,
                -800.0,
                -20000.0,
                -7.07,
                -1.32,
                -349.0,
                -1411.4,
                -120.0,
                -383.0,
                -67.1,
                -34.0,
                -123.0,
                -2000.0,
                130.82,
                -4000.0,
                -3000.0,
            ],
            "Валюта платежа": [
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
                "RUB",
            ],
            "Категория": [
                "Супермаркеты",
                "Супермаркеты",
                "Различные товары",
                "Переводы",
                "Переводы",
                "Каршеринг",
                "Каршеринг",
                "Канцтовары",
                "Ж/д билеты",
                "Фастфуд",
                "Дом и ремонт",
                "Дом и ремонт",
                "Фастфуд",
                "Аптеки",
                "Переводы",
                "Бонусы",
                "Наличные",
                "Наличные",
            ],
        }
    )


@pytest.fixture
def expenses_result():
    return {
        "total_amount": 33056.06,
        "main": [
            {"category": "Ж/д билеты", "amount": 1411.4},
            {"category": "Различные товары", "amount": 564.0},
            {"category": "Дом и ремонт", "amount": 450.1},
            {"category": "Канцтовары", "amount": 349.0},
            {"category": "Супермаркеты", "amount": 196.17},
            {"category": "Фастфуд", "amount": 154.0},
            {"category": "Аптеки", "amount": 123.0},
            {"category": "Остальное", "amount": 8.39},
        ],
        "transfers_and_cash": [
            {"category": "Переводы", "amount": 22800.0},
            {"category": "Наличные", "amount": 7000.0},
        ],
    }


@pytest.fixture
def expenses_no_filter():
    return pd.DataFrame(
        {
            "Статус": ["FAILED", "OK", "OK"],
            "Сумма платежа": [-118.12, 78.05, -564.0],
            "Валюта платежа": ["RUB", "RUB", "USD"],
            "Категория": ["Супермаркеты", "Супермаркеты", "Различные товары"],
        }
    )


@pytest.fixture
def expenses_less_seven_origin():
    return pd.DataFrame(
        {
            "Статус": ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"],
            "Сумма платежа": [-1411.4, -349.0, -7.07, -1.32, -4000.0, -800.0, -2000.0, -564.0, -118.12, -120.0, -34.0],
            "Валюта платежа": ["RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB"],
            "Категория": [
                "Ж/д билеты",
                "Канцтовары",
                "Каршеринг",
                "Каршеринг",
                "Наличные",
                "Переводы",
                "Переводы",
                "Различные товары",
                "Супермаркеты",
                "Фастфуд",
                "Фастфуд",
            ],
        }
    )


@pytest.fixture
def expenses_result_less_seven():
    return {
        "total_amount": 9404.91,
        "main": [
            {"category": "Ж/д билеты", "amount": 1411.4},
            {"category": "Различные товары", "amount": 564.0},
            {"category": "Канцтовары", "amount": 349.0},
            {"category": "Фастфуд", "amount": 154.0},
            {"category": "Супермаркеты", "amount": 118.12},
            {"category": "Каршеринг", "amount": 8.39},
        ],
        "transfers_and_cash": [{"category": "Наличные", "amount": 4000.0}, {"category": "Переводы", "amount": 2800.0}],
    }


@pytest.fixture
def income_origin():
    return pd.DataFrame(
        {
            "Статус": ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "FAILED", "OK", "OK", "OK"],
            "Сумма платежа": [1411.4, 349.0, 7.07, 1.32, 4000.0, -800.0, 2000.0, 564.0, 118.12, 120.0, -34.0],
            "Валюта платежа": ["RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "USD", "USD"],
            "Категория": [
                "Ж/д билеты",
                "Канцтовары",
                "Каршеринг",
                "Каршеринг",
                "Наличные",
                "Переводы",
                "Переводы",
                "Различные товары",
                "Супермаркеты",
                "Фастфуд",
                "Фастфуд",
            ],
        }
    )


@pytest.fixture
def income_result():
    return {
        "total_amount": 7886.91,
        "main": [
            {"category": "Наличные", "amount": 4000.0},
            {"category": "Переводы", "amount": 2000.0},
            {"category": "Ж/д билеты", "amount": 1411.4},
            {"category": "Канцтовары", "amount": 349.0},
            {"category": "Супермаркеты", "amount": 118.12},
            {"category": "Каршеринг", "amount": 8.39},
        ],
    }


@pytest.fixture
def income_no_filter():
    return pd.DataFrame(
        {
            "Статус": ["FAILED", "OK", "OK"],
            "Сумма платежа": [118.12, -120.0, 34.0],
            "Валюта платежа": ["RUB", "USD", "USD"],
            "Категория": ["Ж/д билеты", "Канцтовары", "Каршеринг"],
        }
    )


@pytest.fixture
def reports_by_category_df():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "06.12.2021 00:26:13",
                "07.11.2021 16:50:25",
                "23.09.2021 17:26:13",
                "15.08.2021 09:50:25",
            ],
            "Категория": ["Связь", "Цветы", "Связь", "Связь"],
            "Валюта платежа": ["RUB", "RUB", "RUB", "RUB"],
            "Статус": ["OK", "OK", "OK", "OK"],
            "Сумма платежа": [-131.20, -2.07, -160.40, -17.93],
            "Номер карты": ["*5091", "*7197", "*5091", "*7197"],
            "Описание": ["МТС", "ИП Исаева О.Н.", "МТС", "Сервис"],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def reports_by_category():
    df = pd.DataFrame(
        {
            "Дата операции": ["06.12.2021 00:26:13", "23.09.2021 17:26:13"],
            "Номер карты": ["*5091", "*5091"],
            "Сумма платежа": [-131.20, -160.40],
            "Валюта платежа": ["RUB", "RUB"],
            "Категория": ["Связь", "Связь"],
            "Описание": ["МТС", "МТС"],
        }
    )
    return df.to_dict(orient="records")


@pytest.fixture
def reports_by_weekday_df():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
                "13.12.2021 09:50:25",
                "15.12.2021 09:50:25",
                "14.11.2021 09:50:25",
                "27.09.2021 09:50:25",
                "14.08.2021 09:50:25",
                "03.11.2021 09:50:25",
            ],
            "Статус": ["OK", "FAILED", "OK", "OK", "OK", "OK", "OK", "OK"],
            "Сумма платежа": [-131.20, -2.07, 160.40, -17.93, -127.55, -315.02, 35.60, -76.12],
            "Валюта платежа": ["USD", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB", "RUB"],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def reports_by_weekday():
    return [
        {"День недели": "1. ПН", "Средняя сумма платежей": 315.02},
        {"День недели": "3. СР", "Средняя сумма платежей": 47.03},
        {"День недели": "7. ВС", "Средняя сумма платежей": 127.55},
    ]


@pytest.fixture
def reports_no_filter_df():
    df = pd.DataFrame(
        {
            "Дата операции": [
                "26.12.2021 09:50:25",
                "21.12.2021 09:50:25",
                "13.12.2021 09:50:25",
                "15.12.2021 09:50:25",
                "14.11.2021 09:50:25",
                "27.09.2021 09:50:25",
                "14.08.2021 09:50:25",
                "03.11.2021 09:50:25",
            ],
            "Статус": ["OK", "FAILED", "OK", "FAILED", "OK", "FAILED", "OK", "FAILED"],
            "Сумма платежа": [-131.20, -2.07, 160.40, -17.93, -127.55, -315.02, 35.60, -76.12],
            "Валюта платежа": ["USD", "RUB", "USD", "RUB", "USD", "RUB", "USD", "RUB"],
        }
    )
    df["Дата операции"] = pd.to_datetime(df["Дата операции"], dayfirst=True)
    return df


@pytest.fixture
def reports_by_workday():
    return [
        {"День недели": "Выходной", "Средняя сумма платежей": 127.55},
        {"День недели": "Рабочий", "Средняя сумма платежей": 136.36},
    ]
